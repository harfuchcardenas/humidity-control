#!/usr/bin/perl
use strict;
use warnings;
use Cwd;

# Function to navigate directories interactively
sub navigate_directory {
    my $current_dir = cwd();  # Get current working directory
    print "\nCurrent Directory: $current_dir\n";

    # Open and get subdirectories
    opendir(my $dh, $current_dir) or die "Cannot open directory: $!\n";
    my @subdirs = grep { -d "$current_dir/$_" && !/^\./ } readdir($dh);
    closedir($dh);

    # If no subdirectories exist, return current directory
    unless (@subdirs) {
        print "No subdirectories found. Storing this directory...\n";
        return $current_dir;
    }

    # List subdirectories for selection
    print "Available subdirectories:\n";
    for (my $i = 0; $i < @subdirs; $i++) {
        print "$i: $subdirs[$i]\n";
    }

    # User input selection
    print "Select a subdirectory by number or press Enter to confirm: ";
    my $choice = <STDIN>;
    chomp($choice);

    # If user presses Enter, store current directory
    if ($choice eq '') {
        print "Final selection confirmed. Storing: $current_dir\n";
        return $current_dir;
    }

    # Validate user input
    if ($choice =~ /^\d+$/ && $choice >= 0 && $choice < @subdirs) {
        my $selected_dir = $subdirs[$choice];
        chdir("$current_dir/$selected_dir") or die "Failed to enter '$selected_dir': $!\n";
        return navigate_directory();  # Recursively call function
    } else {
        print "Invalid selection. Try again!\n";
        return navigate_directory();  # Retry selection
    }
}

# Start navigation from 'zephyrproject'
chdir("zephyrproject") or die "Failed to enter 'zephyrproject': $!\n";

# Store final directory choice
my $src_dir = navigate_directory();

# Output stored directory for later use
print "\nDirectory of source code: $src_dir\n";
print "\nPress Enter to continue...";
<STDIN>;  # Waits for user input before exiting

#Get pwd via cwd
my $current_dir = $src_dir; # Stores the current directory

# Run 'dpkg -s python3' to check if Python is installed
my $check_python = `dpkg -s python3 2>/dev/null | grep Version`;

# Verify the output
if ($check_python) {
    print "Python is installed:\n$check_python";
} else {
    print "Python is NOT installed.\n";
    exit 0;
}

# If Python 3 is installed, continue with the script
my $dir = "/zephyrproject";
$current_dir .= $dir;
my $zeprodir = 0;  # Flag to track whether the directory was newly created

# Check if the directory exists
if (-d $current_dir) {
    chdir("$current_dir") or die "Failed to change directory: $!\n";
} else {
    print "The directory '$dir' does not exist. Creating it now...\n";
    mkdir $current_dir or die "Failed to create directory: $!";
    chdir("zephyrproject") or die "Failed to change directory: $!\n";
}

print "PWD: $current_dir";
# Step 1: Create the Python virtual environment
my $venv_name = ".venv";
my $status = system("bash -c '
    sudo apt install python3-venv &&
    pwd &&
    python3 -m venv $venv_name &&
    cd .. &&
    source zephyrproject/.venv/bin/activate &&
    pip install west &&
    (west init zephyrproject || echo \"Zephyr already initialized\") &&
    cd zephyrproject &&
    west update &&
    west zephyr-export &&
    west packages pip --install &&
    cd zephyr &&
    pwd &&
    west sdk install &&
    west build -p always -b nrf7002dk/nrf5340/cpuapp --source-dir $current_dir/zephyr/samples/basic/blinky_pwm --build-dir $current_dir/zephyr/build &&
    deactivate
'");
# Step 2: Activate virtual environment, install west, export zephyr to be found by cmake, install necessary modules required by python, install the west sdk and build of the project using west.
system("echo 'Virtual environment deactivated'");
exit 0;
